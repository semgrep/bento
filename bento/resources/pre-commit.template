#!/usr/bin/env python3
"""File generated by bento. Roughtly lifted from pre-commit"""
from __future__ import print_function

import distutils.spawn
import os
import subprocess
import sys

HERE = os.path.dirname(os.path.abspath(__file__))


BENTO_TEMPLATE_HASH = "3a04e0f0cd9243d20b1e33da7ac13115"


class FatalError(RuntimeError):
    pass


def _norm_exe(exe):
    """Necessary for shebang support on windows.

    lifted from pre-commit which roughly lifted from `identify.identify.parse_shebang`
    """
    with open(exe, "rb") as f:
        if f.read(2) != b"#!":
            return ()
        try:
            first_line = f.readline().decode("UTF-8")
        except UnicodeDecodeError:
            return ()

        cmd = first_line.split()
        if cmd[0] == "/usr/bin/env":
            del cmd[0]
        return tuple(cmd)


def _run_legacy():
    legacy_hook = os.path.join(HERE, "pre-commit.pre-bento")
    if os.access(legacy_hook, os.X_OK):
        cmd = _norm_exe(legacy_hook) + (legacy_hook,) + tuple(sys.argv[1:])
        proc = subprocess.Popen(cmd)
        proc.communicate(None)
        return proc.returncode, None
    else:
        return 0, None


def _validate_config():
    """
        Do validation here
    """
    pass


def _exe():
    if distutils.spawn.find_executable("bento"):
        return ("bento", "--agree", "check", "--staged-only")

    raise FatalError("`bento` not found.")


def _rev_exists(rev):
    return not subprocess.call(("git", "rev-list", "--quiet", rev))


if sys.version_info < (3, 7):  # https://bugs.python.org/issue25942

    def _subprocess_call(cmd):  # this is the python 2.7 implementation
        return subprocess.Popen(cmd).wait()


else:
    _subprocess_call = subprocess.call


def main():
    retv, stdin = _run_legacy()
    try:
        _validate_config()
        return retv | _subprocess_call(_exe())
    except KeyboardInterrupt:
        return 1


if __name__ == "__main__":
    exit(main())
