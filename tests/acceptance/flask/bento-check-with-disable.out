flake8 no-iter-methods https://github.com/PyCQA/flake8-bugbear/blob/master/README.rst#list-of-warnings
     > src/flask/_compat.py:44
     ╷
   44│   iterkeys = lambda d: d.iterkeys()
     ╵
     = Python 3 does not include `.iter*` methods on dictionaries. Remove the
       `iter` prefix from the method name. For Python 2 compatibility, prefer
       the Python 3 equivalent unless you expect the size of the container to be
       large or unbounded. Then use `six.iter*` or `future.utils.iter*`.

flake8 no-iter-methods https://github.com/PyCQA/flake8-bugbear/blob/master/README.rst#list-of-warnings
     > src/flask/_compat.py:45
     ╷
   45│   itervalues = lambda d: d.itervalues()
     ╵
     = Python 3 does not include `.iter*` methods on dictionaries. Remove the
       `iter` prefix from the method name. For Python 2 compatibility, prefer
       the Python 3 equivalent unless you expect the size of the container to be
       large or unbounded. Then use `six.iter*` or `future.utils.iter*`.

flake8 no-iter-methods https://github.com/PyCQA/flake8-bugbear/blob/master/README.rst#list-of-warnings
     > src/flask/_compat.py:46
     ╷
   46│   iteritems = lambda d: d.iteritems()
     ╵
     = Python 3 does not include `.iter*` methods on dictionaries. Remove the
       `iter` prefix from the method name. For Python 2 compatibility, prefer
       the Python 3 equivalent unless you expect the size of the container to be
       large or unbounded. Then use `six.iter*` or `future.utils.iter*`.

bandit eval-used https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval
     > src/flask/cli.py:892
     ╷
  892│   eval(compile(f.read(), startup, "exec"), ctx)
     ╵
     = Use of possibly insecure function - consider using safer
       ast.literal_eval.

bandit try-except-pass https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html
     > tests/test_appctx.py:74
     ╷
   74│   except Exception:
     ╵
     = Try, Except, Pass detected.

bandit try-except-pass https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html
     > tests/test_appctx.py:93
     ╷
   93│   except Exception:
     ╵
     = Try, Except, Pass detected.

bandit try-except-pass https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html
     > tests/test_basic.py:784
     ╷
  784│   except Exception:
     ╵
     = Try, Except, Pass detected.

bandit try-except-pass https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html
     > tests/test_basic.py:796
     ╷
  796│   except Exception:
     ╵
     = Try, Except, Pass detected.

bandit flask-debug-true https://bandit.readthedocs.io/en/latest/plugins/b201_flask_debug_true.html
     > tests/test_basic.py:1912
     ╷
 1912│   app.run(hostname, port, debug=True)
     ╵
     = A Flask app appears to be run with debug=True, which exposes the Werkzeug
       debugger and allows the execution of arbitrary code.

r2c.flask secure-set-cookie https://bento.dev/checks/flask/secure-set-cookie/
     > tests/test_basic.py:1956
     ╷
 1956│   r.set_cookie("foo", "bar" * 100)
     ╵
     = Flask cookies should be handled securely by setting secure=True,
       httponly=True, and samesite='Lax' in set_cookie(...).  If your situation
       calls for different settings, explicitly disable the setting.  If you
       want to send the cookie over http, set secure=False.  If you want to let
       client-side JavaScript read the cookie, set httponly=False.  If you want
       to attach cookies to requests for external sites, set samesite=None.

bandit try-except-pass https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html
     > tests/test_reqctx.py:45
     ╷
   45│   except Exception:
     ╵
     = Try, Except, Pass detected.

bandit try-except-pass https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html
     > tests/test_reqctx.py:64
     ╷
   64│   except Exception:
     ╵
     = Try, Except, Pass detected.

r2c.flask unescaped-file-extension https://bento.dev/checks/flask/unescaped-file-extension/
     > tests/test_templating.py:96
     ╷
   96│   return flask.render_template(
     ╵
     = Flask does not automatically escape Jinja templates unless they have
       .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks.

r2c.flask unescaped-file-extension https://bento.dev/checks/flask/unescaped-file-extension/
     > tests/test_templating.py:115
     ╷
  115│   assert flask.render_template("mail.txt", foo="<test>") == "<test> Mail"
     ╵
     = Flask does not automatically escape Jinja templates unless they have
       .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks.

bandit flask-debug-true https://bandit.readthedocs.io/en/latest/plugins/b201_flask_debug_true.html
     > tests/test_templating.py:404
     ╷
  404│   app.run(debug=True)
     ╵
     = A Flask app appears to be run with debug=True, which exposes the Werkzeug
       debugger and allows the execution of arbitrary code.

